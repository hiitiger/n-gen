#include "<%= objectName %>.h"

Napi::FunctionReference <%= objectName %>::constructor;

Napi::Object <%= objectName %>::Init(Napi::Env env, Napi::Object exports)
{
    Napi::HandleScope scope(env);

    Napi::Function func = DefineClass(env, "<%= objectName %>", {
            InstanceMethod("plusOne", &<%= objectName %>::PlusOne),
            InstanceMethod("value", &<%= objectName %>::GetValue),
            InstanceMethod("multiply", &<%= objectName %>::Multiply)
        });

    constructor = Napi::Persistent(func);
    constructor.SuppressDestruct();

    exports.Set("<%= objectName %>", func);
    return exports;
}

<%= objectName %>::<%= objectName %>(const Napi::CallbackInfo &info)
    : Napi::ObjectWrap<<%= objectName %>>(info)
{
    Napi::Env env = info.Env();
    Napi::HandleScope scope(env);

    int length = info.Length();

    if (length <= 0 || !info[0].IsNumber())
    {
        Napi::TypeError::New(env, "Number expected").ThrowAsJavaScriptException();
    }

    Napi::Number value = info[0].As<Napi::Number>();
    this->value_ = value.DoubleValue();
}

Napi::Value <%= objectName %>::GetValue(const Napi::CallbackInfo &info)
{
    double num = this->value_;

    return Napi::Number::New(info.Env(), num);
}

Napi::Value <%= objectName %>::PlusOne(const Napi::CallbackInfo &info)
{
    this->value_ = this->value_ + 1;

    return <%= objectName %>::GetValue(info);
}

Napi::Value <%= objectName %>::Multiply(const Napi::CallbackInfo &info)
{
    Napi::Number multiple;
    if (info.Length() <= 0 || !info[0].IsNumber())
    {
        multiple = Napi::Number::New(info.Env(), 1);
    }
    else
    {
        multiple = info[0].As<Napi::Number>();
    }

    Napi::Object obj = constructor.New({Napi::Number::New(info.Env(), this->value_ * multiple.DoubleValue())});

    return obj;
}